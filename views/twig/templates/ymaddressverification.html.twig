<style>
    @supports (--css: variables) {
        :root {
            --smartmaps-text-color: #000;
            --smartmaps-input-bg-color: #eff1f2;
            --smartmaps-border: none;
            --smartmaps-boxshadow: none;
            --smartmaps-border-radius: 0px;
            --smartmaps-font-size: inherit;
        }
    }
    .sm-autocomplete{
        display: block;
    }
    .sm-autocomplete svg{
        left: calc(100% - 20px);
    }
    .sm-autocomplete [type=text]{
        background-color: #eff1f2;
    }
    .sm-autocomplete + label  {
        position:absolute;
        top:0;
        left:0;
        width:100%;
        height:100%;
        padding:1rem .75rem;
        overflow:hidden;
        text-align:start;
        text-overflow:ellipsis;
        white-space:nowrap;
        pointer-events:none;
        border:1px solid transparent;
        transform-origin:0 0;
        transition:opacity .1s ease-in-out,transform .1s ease-in-out;
        opacity:.65;
        transform:scale(.85) translateY(-.5rem) translateX(.15rem)
     }

    .sm-autocomplete .form-control{
        height:calc(3.5rem + 2px);
        line-height:1.25
    }
    .sm-autocomplete .form-control{
        padding:1rem .75rem
    }
    .sm-autocomplete .form-control::placeholder{
        color:transparent
    }
    .sm-autocomplete .form-control:focus,
    .sm-autocomplete .form-control:not(:placeholder-shown){
        padding-top:1.625rem;
        padding-bottom:.625rem
    }
    .sm-autocomplete .form-control:-webkit-autofill{
        padding-top:1.625rem;
        padding-bottom:.625rem
    }

    /*
        FIXME New autocomplete DOM structure disconnects field from label
        The CSS pseudo class :has() could help but not supported in Firefox at the moment
    */
    .sm-autocomplete .form-control:focus~label,
    .sm-autocomplete .form-control:not(:placeholder-shown)~label{
        opacity:.65;
        transform:scale(.85) translateY(-.5rem) translateX(.15rem)
    }
    .sm-autocomplete .form-control:-webkit-autofill~label{
        opacity:.65;
        transform:scale(.85) translateY(-.5rem) translateX(.15rem)
    }
</style>

{% set aCountryList = oViewConf.getCountryList() %}
{% set sActiveThemeId = oViewConf.getActiveTheme()|lower %}

{{ script({ include: oViewConf.getModuleUrl('ymaddressverification', 'js/yellowmap_ymaddressverification.js'), priority: 1, dynamic: __oxid_include_dynamic }) }}

<script src="{{ oViewConf.fcGetYMFullLibraryUrl() }}"></script>

<script>
    var iso2Id = {};
    var id2Iso = {};
    var allowedIso = [];

    {% for sCountryId, oCountry in aCountryList %}
        id2Iso["{{ sCountryId }}"] = "{{ oCountry.oxcountry__oxisoalpha2.value }}";
        iso2Id["{{ oCountry.oxcountry__oxisoalpha2.value }}"] = "{{ sCountryId }}";
        {% if sCountryId in aHomeCountry %}
            allowedIso.push("{{ oCountry.oxcountry__oxisoalpha2.value|lower }}");
        {% endif %}
    {% endfor %}

    document.addEventListener("DOMContentLoaded", function(event) {
        initCountriesLists(id2Iso, iso2Id, allowedIso);

        ym.ready({ autocomplete: 5 }, function (modules) {
            var oFcTargetElem = document.getElementsByName(oFcFieldMappingInv.street);
            if (oFcTargetElem.length > 0) {
                fcInitAutocompleteField(modules, 'input[name="' + oFcFieldMappingInv.street + '"]', oFcFieldMappingInv);
            }
            oFcTargetElem = document.getElementsByName(oFcFieldMappingDel.street);
            if (oFcTargetElem.length > 0) {
                fcInitAutocompleteField(modules, 'input[name="' + oFcFieldMappingDel.street + '"]', oFcFieldMappingDel);
            }
        });
    });

    function fcInitAutocompleteField(modules, sTargetSelector, oFieldMapping) {
        var oAutoCompleteField = modules.autoComplete(sTargetSelector, {
            isoCountries: fcFetchIsoCountries(oFieldMapping),
            includeFilters: {
            },
            dataType: 'json',
            onSelected: function (geojson, address, query) {
                fcFillAddress(address, oFieldMapping);
            },
            onReady: function () {
                var isFirefox = typeof InstallTrigger !== "undefined";
                if (!isFirefox) {
                    this.element.autocomplete = "disabled";
                }
            }
        });

        var oCountrySelector = document.getElementsByName(oFieldMapping.country);
        if (oCountrySelector.length > 0) {
            oCountrySelector = oCountrySelector[0];
            oCountrySelector.onchange = function() {
                oAutoCompleteField.options.isoCountries = fcFetchIsoCountries(oFieldMapping);
            }
        }
    }
</script>
